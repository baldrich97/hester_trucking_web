generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["rhel-openssl-1.1.x", "rhel-openssl-3.0.x"] // Good default for Vercel
}

generator zod {
  provider              = "zod-prisma"
  prismaJsonNullability = "true"
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  relationModel         = "true"
  useDecimalJs          = "true"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  email        String
  organization String
  password     String
  username     String
}

model CustomerLoadTypes {
  ID            Int       @id @default(autoincrement())
  CustomerID    Int
  LoadTypeID    Int
  /// @zod.custom(z.coerce.date())
  DateDelivered DateTime  @db.Date
  Customers     Customers @relation(fields: [CustomerID], references: [ID], onUpdate: Restrict, map: "FK_CustomerLoadTypes_Customer")
  LoadTypes     LoadTypes @relation(fields: [LoadTypeID], references: [ID], onUpdate: Restrict, map: "FK_CustomerLoadTypes_LoadType")

  @@index([CustomerID], map: "FK_CustomerLoadTypes_Customer")
  @@index([LoadTypeID], map: "FK_CustomerLoadTypes_LoadType")
}

model Customers {
  ID                        Int                         @id @default(autoincrement())
  /// @zod.min(1)
  Name                      String                      @db.VarChar(255)
  /// @zod.min(1)
  Street                    String                      @db.VarChar(255)
  /// @zod.min(1)
  City                      String                      @db.VarChar(255)
  /// @zod.min(1)
  State                     Int                         @default(25)
  /// @zod.min(1)
  ZIP                       String                      @db.VarChar(10)
  Phone                     String?                     @db.VarChar(20)
  Email                     String?                     @db.VarChar(255)
  Notes                     String?                     @db.VarChar(255)
  MainContact               String?                     @db.VarChar(255)
  Deleted                   Boolean?
  States                    States                      @relation(fields: [State], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Customers_States")
  CustomerDeliveryLocations CustomerDeliveryLocations[]
  CustomerLoadTypes         CustomerLoadTypes[]
  DeliveryLocations         DeliveryLocations[]
  Invoices                  Invoices[]
  Jobs                      Jobs[]
  Loads                     Loads[]
  Weeklies                  Weeklies[]

  @@index([State], map: "FK_Customers_States")
  @@fulltext([Name, Street, City, ZIP, Phone, Email, Notes, MainContact])
}

model DeliveryLocations {
  ID                        Int                         @id @default(autoincrement())
  Description               String                      @db.VarChar(255)
  Deleted                   Boolean?
  CustomerID                Int?
  Customers                 Customers?                  @relation(fields: [CustomerID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_DeliveryLocations_Customers")
  CustomerDeliveryLocations CustomerDeliveryLocations[]
  Jobs                      Jobs[]
  Loads                     Loads[]
  Weeklies                  Weeklies[]

  @@index([CustomerID], map: "FK_DeliveryLocations_Customers")
  @@fulltext([Description])
}

model Drivers {
  ID            Int            @id @default(autoincrement())
  /// @zod.min(1)
  FirstName     String         @db.VarChar(255)
  MiddleName    String?        @db.VarChar(255)
  /// @zod.min(1)
  LastName      String         @db.VarChar(255)
  Street        String?        @db.VarChar(255)
  City          String?        @db.VarChar(255)
  State         Int?
  ZIP           String?        @db.VarChar(10)
  DOB           DateTime?      @db.Date
  License       String?        @db.VarChar(255)
  Email         String?        @db.VarChar(255)
  Phone         String?        @db.VarChar(20)
  Notes         String?        @db.VarChar(255)
  Deleted       Boolean?
  HireDate      String?        @db.VarChar(255)
  OwnerOperator Boolean
  States        States?        @relation(fields: [State], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Drivers_States")
  Dailies       Dailies[]
  Jobs          Jobs[]
  Loads         Loads[]
  PayStubs      PayStubs[]
  TrucksDriven  TrucksDriven[]

  @@index([State], map: "FK_Drivers_States")
  @@fulltext([FirstName, MiddleName, LastName, Street, City, ZIP, License, Email, Phone, Notes, HireDate])
}

model Invoices {
  ID             Int        @id @default(autoincrement())
  /// @zod.custom(z.coerce.date())
  InvoiceDate    DateTime   @db.Date
  Number         Int?
  /// @zod.min(1)
  CustomerID     Int
  /// @zod.min(1)
  TotalAmount    Float
  /// @zod.custom(z.coerce.date())
  PaidDate       DateTime?  @db.DateTime(0)
  CheckNumber    String?    @db.VarChar(255)
  Paid           Boolean?   @default(false)
  Printed        Boolean?   @default(false)
  Deleted        Boolean?
  PaymentType    String?    @default("N/A") @db.VarChar(255)
  Consolidated   Boolean?   @default(false)
  ConsolidatedID Int?
  Customers      Customers  @relation(fields: [CustomerID], references: [ID], onUpdate: Restrict, map: "FK_Invoices_Customer")
  Loads          Loads[]
  Weeklies       Weeklies[]

  @@index([CustomerID], map: "FK_Invoices_Customer")
}

model LoadTypes {
  ID                Int                 @id @default(autoincrement())
  /// @zod.min(1)
  Description       String              @db.VarChar(255)
  Deleted           Boolean?
  SourceID          Int?
  Notes             String?             @db.VarChar(255)
  CustomerLoadTypes CustomerLoadTypes[]
  Jobs              Jobs[]
  Loads             Loads[]
  Weeklies          Weeklies[]

  @@fulltext([Description, Notes])
}

model States {
  ID           Int         @id @default(autoincrement())
  Name         String      @db.VarChar(15)
  Abbreviation String      @db.VarChar(2)
  Customers    Customers[]
  Drivers      Drivers[]
}

model Trucks {
  ID           Int            @id @default(autoincrement())
  /// @zod.min(1)
  Name         String         @db.VarChar(255)
  VIN          String?        @db.VarChar(255)
  Deleted      Boolean?
  Notes        String?        @db.VarChar(255)
  Loads        Loads[]
  TrucksDriven TrucksDriven[]

  @@fulltext([Name, VIN, Notes])
}

model TrucksDriven {
  ID         Int      @id @default(autoincrement())
  TruckID    Int
  DriverID   Int
  /// @zod.custom(z.coerce.date())
  DateDriven DateTime @db.Date
  Drivers    Drivers  @relation(fields: [DriverID], references: [ID], onUpdate: Restrict, map: "FK_TrucksDriven_Driver")
  Trucks     Trucks   @relation(fields: [TruckID], references: [ID], onUpdate: Restrict, map: "FK_TrucksDriven_Truck")

  @@index([DriverID], map: "FK_TrucksDriven_Driver")
  @@index([TruckID], map: "FK_TrucksDriven_Truck")
}

model Loads {
  ID                 Int                @id @default(autoincrement())
  /// @zod.custom(z.coerce.date())
  StartDate          DateTime           @db.Date
  /// @zod.custom(z.coerce.date())
  Created            DateTime           @default(now()) @db.DateTime(0)
  /// @zod.custom(z.coerce.number())
  Weight             Float?
  /// @zod.custom(z.coerce.number())
  Hours              Float?
  /// @zod.custom(z.coerce.number())
  TotalRate          Float?
  /// @zod.custom(z.coerce.number())
  TotalAmount        Float?
  /// @zod.custom(z.coerce.number())
  TruckRate          Float?
  /// @zod.custom(z.coerce.number())
  MaterialRate       Float?
  Received           String?            @db.VarChar(50)
  Notes              String?            @db.VarChar(255)
  TicketNumber       Int
  Invoiced           Boolean?
  /// @zod.min(1)
  CustomerID         Int
  /// @zod.min(1)
  InvoiceID          Int?
  /// @zod.min(1)
  LoadTypeID         Int?
  DeliveryLocationID Int?
  TruckID            Int?
  DriverID           Int?
  Deleted            Boolean?
  JobID              Int?
  Week               String             @db.VarChar(20)
  DriverRate         Float?
  Customers          Customers          @relation(fields: [CustomerID], references: [ID], onUpdate: Restrict, map: "FK_Loads_Customer")
  DeliveryLocations  DeliveryLocations? @relation(fields: [DeliveryLocationID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_DeliveryLocation")
  Drivers            Drivers?           @relation(fields: [DriverID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_Driver")
  Invoices           Invoices?          @relation(fields: [InvoiceID], references: [ID], onUpdate: Restrict, map: "FK_Loads_Invoice")
  Jobs               Jobs?              @relation(fields: [JobID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Loads_Job")
  LoadTypes          LoadTypes?         @relation(fields: [LoadTypeID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Loads_LoadType")
  Trucks             Trucks?            @relation(fields: [TruckID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Loads_Truck")

  @@index([CustomerID], map: "FK_Loads_Customer")
  @@index([DeliveryLocationID], map: "FK_Loads_DeliveryLocation")
  @@index([DriverID], map: "FK_Loads_Driver")
  @@index([InvoiceID], map: "FK_Loads_Invoice")
  @@index([LoadTypeID], map: "FK_Loads_LoadType")
  @@index([TruckID], map: "FK_Loads_Truck")
  @@index([JobID], map: "FK_Loads_Job")
}

model CustomerDeliveryLocations {
  ID                 Int               @id @default(autoincrement())
  CustomerID         Int
  DeliveryLocationID Int
  /// @zod.custom(z.coerce.date())
  DateUsed           DateTime          @db.Date
  Customers          Customers         @relation(fields: [CustomerID], references: [ID], onUpdate: Restrict, map: "FK_CustomerDeliveryLocations_Customer")
  DeliveryLocations  DeliveryLocations @relation(fields: [DeliveryLocationID], references: [ID], onUpdate: Restrict, map: "FK_CustomerDeliveryLocations_DeliveryLocation")

  @@index([CustomerID], map: "FK_CustomerDeliveryLocations_Customer")
  @@index([DeliveryLocationID], map: "FK_CustomerDeliveryLocations_DeliveryLocation")
}

model Dailies {
  ID          Int       @id @default(autoincrement())
  DriverID    Int
  Week        String    @db.VarChar(20)
  LastPrinted DateTime? @db.DateTime(0)
  Drivers     Drivers   @relation(fields: [DriverID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Dailies_Driver")
  Jobs        Jobs[]

  @@index([DriverID], map: "FK_Dailies_Driver")
}

model Jobs {
  ID                 Int               @id @default(autoincrement())
  DriverID           Int
  LoadTypeID         Int
  CustomerID         Int
  PaidOut            Boolean           @default(false)
  TruckingRevenue    Float?            @db.Float
  CompanyRevenue     Float?            @db.Float
  TruckingRate       Float             @db.Float
  CompanyRate        Float             @db.Float
  DeliveryLocationID Int
  WeeklyID           Int
  DailyID            Int
  MaterialRate       Float             @db.Float
  DriverRate         Float             @db.Float
  PayStubID          Int?
  Customers          Customers         @relation(fields: [CustomerID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Jobs_Customers")
  Dailies            Dailies           @relation(fields: [DailyID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Jobs_Dailies")
  DeliveryLocations  DeliveryLocations @relation(fields: [DeliveryLocationID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Jobs_DeliveryLocations")
  Drivers            Drivers           @relation(fields: [DriverID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Jobs_Drivers")
  LoadTypes          LoadTypes         @relation(fields: [LoadTypeID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Jobs_LoadTypes")
  PayStubs           PayStubs?         @relation(fields: [PayStubID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Jobs_PayStubs")
  Weeklies           Weeklies          @relation(fields: [WeeklyID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Jobs_Weeklies")
  Loads              Loads[]

  @@index([CustomerID], map: "FK_Jobs_Customers")
  @@index([DeliveryLocationID], map: "FK_Jobs_DeliveryLocations")
  @@index([DriverID], map: "FK_Jobs_Drivers")
  @@index([LoadTypeID], map: "FK_Jobs_LoadTypes")
  @@index([DailyID], map: "FK_Jobs_Dailies")
  @@index([WeeklyID], map: "FK_Jobs_Weeklies")
  @@index([PayStubID], map: "FK_Jobs_PayStubs")
}

model Weeklies {
  ID                 Int               @id @default(autoincrement())
  Week               String            @db.VarChar(20)
  CustomerID         Int
  InvoiceID          Int?
  CompanyRate        Float?            @db.Float
  Revenue            Float?            @db.Float
  LoadTypeID         Int
  DeliveryLocationID Int
  LastPrinted        DateTime?         @db.DateTime(0)
  TotalWeight        Float?            @db.Float
  Customers          Customers         @relation(fields: [CustomerID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Weeklies_Customers")
  DeliveryLocations  DeliveryLocations @relation(fields: [DeliveryLocationID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Weeklies_DeliveryLocations")
  Invoices           Invoices?         @relation(fields: [InvoiceID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Weeklies_Invoices")
  LoadTypes          LoadTypes         @relation(fields: [LoadTypeID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Weeklies_LoadTypes")
  Jobs               Jobs[]

  @@index([CustomerID], map: "FK_Weeklies_Customers")
  @@index([InvoiceID], map: "FK_Weeklies_Invoices")
  @@index([DeliveryLocationID], map: "FK_Weeklies_DeliveryLocations")
  @@index([LoadTypeID], map: "FK_Weeklies_LoadTypes")
}

model PayStubs {
  ID          Int       @id @default(autoincrement())
  /// @zod.custom(z.coerce.date())
  Created     DateTime  @default(now()) @db.DateTime(0)
  DriverID    Int
  CheckNumber String    @db.VarChar(50)
  /// @zod.custom(z.coerce.number())
  Gross       Float     @db.Float
  /// @zod.custom(z.coerce.number())
  Percentage  Float     @db.Float
  /// @zod.custom(z.coerce.number())
  NetTotal    Float     @db.Float
  /// @zod.custom(z.coerce.date())
  LastPrinted DateTime? @db.DateTime(0)
  /// @zod.custom(z.coerce.number())
  TakeHome    Float     @db.Float
  Deductions  Float     @default(0) @db.Float
  Additions   Float     @default(0) @db.Float
  Notes       String?   @db.VarChar(1000)
  /// @zod.custom(z.coerce.date())
  DepositDate DateTime? @db.DateTime(0)
  Drivers     Drivers   @relation(fields: [DriverID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PayStubs_Driver")
  Jobs        Jobs[]

  @@index([DriverID], map: "FK_PayStubs_Driver")
}
