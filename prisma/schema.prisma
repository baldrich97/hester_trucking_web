generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

generator zod {
  provider              = "zod-prisma"
  prismaJsonNullability = "true"
  relationModel         = "true"
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = "true"
  imports               = "../src/utils/zodParsers"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  email        String @unique
  organization String
  password     String
  username     String
}

model CustomerLoadTypes {
  ID            Int       @id @default(autoincrement())
  CustomerID    Int
  LoadTypeID    Int
  DateDelivered DateTime  @db.Date /// @zod.custom(imports.parseDate)
  Customers     Customers @relation(fields: [CustomerID], references: [ID], onUpdate: Restrict, map: "FK_CustomerLoadTypes_Customer")
  LoadTypes     LoadTypes @relation(fields: [LoadTypeID], references: [ID], onUpdate: Restrict, map: "FK_CustomerLoadTypes_LoadType")

  @@index([CustomerID], map: "FK_CustomerLoadTypes_Customer")
  @@index([LoadTypeID], map: "FK_CustomerLoadTypes_LoadType")
}

model Customers {
  ID                Int                 @id @default(autoincrement())
  /// @zod.min(1)
  Name              String              @db.VarChar(255)
  /// @zod.min(1)
  Street            String              @db.VarChar(255)
  /// @zod.min(1)
  City              String              @db.VarChar(255)
  /// @zod.min(1)
  State             Int                 @default(25)
  /// @zod.min(1)
  ZIP               String              @db.VarChar(10)
  Phone             String?             @db.VarChar(20)
  Email             String?             @db.VarChar(255)
  Notes             String?             @db.VarChar(255)
  MainContact       String?             @db.VarChar(255)
  Deleted           Boolean?
  States            States              @relation(fields: [State], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Customers_States")
  CustomerLoadTypes CustomerLoadTypes[]
  DeliveryLocations DeliveryLocations[]
  Invoices          Invoices[]
  Loads             Loads[]

  @@index([State], map: "FK_Customers_States")
  @@fulltext([Name, Street, City, ZIP, Phone, Email, Notes, MainContact])
}

model DeliveryLocations {
  ID          Int        @id @default(autoincrement())
  Description String     @db.VarChar(255)
  Deleted     Boolean?
  CustomerID  Int?
  Customers   Customers? @relation(fields: [CustomerID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_DeliveryLocations_Customers")
  Loads       Loads[]

  @@index([CustomerID], map: "FK_DeliveryLocations_Customers")
  @@fulltext([Description])
}

model Drivers {
  ID           Int            @id @default(autoincrement())
  /// @zod.min(1)
  FirstName    String         @db.VarChar(255)
  MiddleName   String?        @db.VarChar(255)
  /// @zod.min(1)
  LastName     String         @db.VarChar(255)
  Street       String?        @db.VarChar(255)
  City         String?        @db.VarChar(255)
  State        Int?
  ZIP          String?        @db.VarChar(10)
  DOB          DateTime?      @db.Date
  License      String?        @db.VarChar(255)
  Email        String?        @db.VarChar(255)
  Phone        String?        @db.VarChar(20)
  Notes        String?        @db.VarChar(255)
  Deleted      Boolean?
  HireDate     String?        @db.VarChar(255)
  States       States?        @relation(fields: [State], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Drivers_States")
  Loads        Loads[]
  TrucksDriven TrucksDriven[]

  @@index([State], map: "FK_Drivers_States")
  @@fulltext([FirstName, MiddleName, LastName, Street, City, ZIP, License, Email, Phone, Notes, HireDate])
}

model Invoices {
  ID          Int                   @id @default(autoincrement())
  InvoiceDate DateTime              @db.Date /// @zod.custom(imports.parseDate)
  Number      Int?
  /// @zod.min(1)
  /// @zod.custom(imports.isNumber)
  CustomerID  Int
  /// @zod.min(1)
  TotalAmount Float
  PaidDate    DateTime?             @db.Date /// @zod.custom(imports.parseDate)
  CheckNumber String?               @db.VarChar(255)
  Paid        Boolean?
  Printed     Boolean?
  Deleted     Boolean?
  PaymentType Invoices_PaymentType?
  Customers   Customers             @relation(fields: [CustomerID], references: [ID], onUpdate: Restrict, map: "FK_Invoices_Customer")
  Loads       Loads[]

  @@index([CustomerID], map: "FK_Invoices_Customer")
}

model LoadTypes {
  ID                Int                 @id @default(autoincrement())
  /// @zod.min(1)
  Description       String              @db.VarChar(255)
  Deleted           Boolean?
  SourceID          Int?
  Notes             String?             @db.VarChar(255)
  CustomerLoadTypes CustomerLoadTypes[]
  Loads             Loads[]

  @@fulltext([Description, Notes])
}

model States {
  ID           Int         @id @default(autoincrement())
  Name         String      @db.VarChar(15)
  Abbreviation String      @db.VarChar(2)
  Customers    Customers[]
  Drivers      Drivers[]
}

model Trucks {
  ID           Int            @id @default(autoincrement())
  /// @zod.min(1)
  Name         String         @db.VarChar(255)
  VIN          String?        @db.VarChar(255)
  Deleted      Boolean?
  Notes        String?        @db.VarChar(255)
  Loads        Loads[]
  TrucksDriven TrucksDriven[]

  @@fulltext([Name, VIN, Notes])
}

model TrucksDriven {
  ID         Int      @id @default(autoincrement())
  TruckID    Int
  DriverID   Int
  DateDriven DateTime @db.Date /// @zod.custom(imports.parseDate)
  Drivers    Drivers  @relation(fields: [DriverID], references: [ID], onUpdate: Restrict, map: "FK_TrucksDriven_Driver")
  Trucks     Trucks   @relation(fields: [TruckID], references: [ID], onUpdate: Restrict, map: "FK_TrucksDriven_Truck")

  @@index([DriverID], map: "FK_TrucksDriven_Driver")
  @@index([TruckID], map: "FK_TrucksDriven_Truck")
}

model Loads {
  ID                 Int                @id @default(autoincrement())
  StartDate          DateTime           @db.Date /// @zod.custom(imports.parseDate)
  EndDate            DateTime           @db.Date /// @zod.custom(imports.parseDate)
  Weight             Float?   /// @zod.custom(imports.isNumber)
  Hours              Float? /// @zod.custom(imports.isNumber)
  TotalRate          Float? /// @zod.custom(imports.isNumber)
  TotalAmount        Float? /// @zod.custom(imports.isNumber)
  TruckRate          Float? /// @zod.custom(imports.isNumber)
  MaterialRate       Float? /// @zod.custom(imports.isNumber)
  Received           String?            @db.VarChar(50)
  Notes              String?            @db.VarChar(255)
  TicketNumber       Int?
  Invoiced           Boolean?
  CustomerID         Int?     /// @zod.min(1)
  InvoiceID          Int?     /// @zod.min(1)
  LoadTypeID         Int?     /// @zod.min(1)
  DeliveryLocationID Int?
  TruckID            Int?
  DriverID           Int?
  Deleted            Boolean?
  Customers          Customers?         @relation(fields: [CustomerID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_Customer")
  DeliveryLocations  DeliveryLocations? @relation(fields: [DeliveryLocationID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_DeliveryLocation")
  Drivers            Drivers?           @relation(fields: [DriverID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_Driver")
  Invoices           Invoices?          @relation(fields: [InvoiceID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_Invoice")
  LoadTypes          LoadTypes?         @relation(fields: [LoadTypeID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_LoadType")
  Trucks             Trucks?            @relation(fields: [TruckID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_Truck")

  @@index([CustomerID], map: "FK_Loads_Customer")
  @@index([DeliveryLocationID], map: "FK_Loads_DeliveryLocation")
  @@index([DriverID], map: "FK_Loads_Driver")
  @@index([InvoiceID], map: "FK_Loads_Invoice")
  @@index([LoadTypeID], map: "FK_Loads_LoadType")
  @@index([TruckID], map: "FK_Loads_Truck")

  @@fulltext([Received, Notes])
}

enum Invoices_PaymentType {
  Cash
  Credit_Card      @map("Credit Card")
  Check
  EMPTY_ENUM_VALUE @map("")
}
