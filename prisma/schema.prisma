generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

generator zod {
  provider              = "zod-prisma"
  modelSuffix           = "Model"
  imports               = "../src/utils/zodParsers"
  useDecimalJs          = "true"
  relationModel         = "true"
  modelCase             = "PascalCase"
  prismaJsonNullability = "true"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  email        String @unique
  organization String
  password     String
  username     String
}

model CustomerLoadTypes {
  ID            Int       @id @default(autoincrement())
  CustomerID    Int
  LoadTypeID    Int
  /// @zod.custom(imports.parseDate)
  DateDelivered DateTime  @db.Date
  Customers     Customers @relation(fields: [CustomerID], references: [ID], onUpdate: Restrict, map: "FK_CustomerLoadTypes_Customer")
  LoadTypes     LoadTypes @relation(fields: [LoadTypeID], references: [ID], onUpdate: Restrict, map: "FK_CustomerLoadTypes_LoadType")

  @@index([CustomerID], map: "FK_CustomerLoadTypes_Customer")
  @@index([LoadTypeID], map: "FK_CustomerLoadTypes_LoadType")
}

model Customers {
  ID                        Int                         @id @default(autoincrement())
  /// @zod.min(1)
  Name                      String                      @db.VarChar(255)
  /// @zod.min(1)
  Street                    String                      @db.VarChar(255)
  /// @zod.min(1)
  City                      String                      @db.VarChar(255)
  /// @zod.min(1)
  State                     Int                         @default(25)
  /// @zod.min(1)
  ZIP                       String                      @db.VarChar(10)
  Phone                     String?                     @db.VarChar(20)
  Email                     String?                     @db.VarChar(255)
  Notes                     String?                     @db.VarChar(255)
  MainContact               String?                     @db.VarChar(255)
  Deleted                   Boolean?
  States                    States                      @relation(fields: [State], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Customers_States")
  CustomerDeliveryLocations CustomerDeliveryLocations[]
  CustomerLoadTypes         CustomerLoadTypes[]
  DeliveryLocations         DeliveryLocations[]
  Invoices                  Invoices[]
  Loads                     Loads[]

  @@index([State], map: "FK_Customers_States")
  @@fulltext([Name, Street, City, ZIP, Phone, Email, Notes, MainContact])
}

model DeliveryLocations {
  ID                        Int                         @id @default(autoincrement())
  Description               String                      @db.VarChar(255)
  Deleted                   Boolean?
  CustomerID                Int?
  Customers                 Customers?                  @relation(fields: [CustomerID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_DeliveryLocations_Customers")
  CustomerDeliveryLocations CustomerDeliveryLocations[]
  Loads                     Loads[]

  @@index([CustomerID], map: "FK_DeliveryLocations_Customers")
  @@fulltext([Description])
}

model Drivers {
  ID           Int            @id @default(autoincrement())
  /// @zod.min(1)
  FirstName    String         @db.VarChar(255)
  MiddleName   String?        @db.VarChar(255)
  /// @zod.min(1)
  LastName     String         @db.VarChar(255)
  Street       String?        @db.VarChar(255)
  City         String?        @db.VarChar(255)
  State        Int?
  ZIP          String?        @db.VarChar(10)
  DOB          DateTime?      @db.Date
  License      String?        @db.VarChar(255)
  Email        String?        @db.VarChar(255)
  Phone        String?        @db.VarChar(20)
  Notes        String?        @db.VarChar(255)
  Deleted      Boolean?
  HireDate     String?        @db.VarChar(255)
  States       States?        @relation(fields: [State], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Drivers_States")
  Loads        Loads[]
  TrucksDriven TrucksDriven[]

  @@index([State], map: "FK_Drivers_States")
  @@fulltext([FirstName, MiddleName, LastName, Street, City, ZIP, License, Email, Phone, Notes, HireDate])
}

model Invoices {
  ID          Int       @id @default(autoincrement())
  /// @zod.custom(imports.parseDate)
  InvoiceDate DateTime  @db.Date
  Number      Int?
  /// @zod.min(1)
  CustomerID  Int
  /// @zod.min(1)
  TotalAmount Float
  /// @zod.custom(imports.parseDate)
  PaidDate    DateTime? @db.Date
  CheckNumber String?   @db.VarChar(255)
  Paid        Boolean?
  Printed     Boolean?
  Deleted     Boolean?
  PaymentType String?   @default("N/A") @db.VarChar(255)
  Customers   Customers @relation(fields: [CustomerID], references: [ID], onUpdate: Restrict, map: "FK_Invoices_Customer")
  Loads       Loads[]

  @@index([CustomerID], map: "FK_Invoices_Customer")
}

model LoadTypes {
  ID                Int                 @id @default(autoincrement())
  /// @zod.min(1)
  Description       String              @db.VarChar(255)
  Deleted           Boolean?
  SourceID          Int?
  Notes             String?             @db.VarChar(255)
  CustomerLoadTypes CustomerLoadTypes[]
  Loads             Loads[]

  @@fulltext([Description, Notes])
}

model States {
  ID           Int         @id @default(autoincrement())
  Name         String      @db.VarChar(15)
  Abbreviation String      @db.VarChar(2)
  Customers    Customers[]
  Drivers      Drivers[]
}

model Trucks {
  ID           Int            @id @default(autoincrement())
  /// @zod.min(1)
  Name         String         @db.VarChar(255)
  VIN          String?        @db.VarChar(255)
  Deleted      Boolean?
  Notes        String?        @db.VarChar(255)
  Loads        Loads[]
  TrucksDriven TrucksDriven[]

  @@fulltext([Name, VIN, Notes])
}

model TrucksDriven {
  ID         Int      @id @default(autoincrement())
  TruckID    Int
  DriverID   Int
  /// @zod.custom(imports.parseDate)
  DateDriven DateTime @db.Date
  Drivers    Drivers  @relation(fields: [DriverID], references: [ID], onUpdate: Restrict, map: "FK_TrucksDriven_Driver")
  Trucks     Trucks   @relation(fields: [TruckID], references: [ID], onUpdate: Restrict, map: "FK_TrucksDriven_Truck")

  @@index([DriverID], map: "FK_TrucksDriven_Driver")
  @@index([TruckID], map: "FK_TrucksDriven_Truck")
}

model Loads {
  ID                 Int                @id @default(autoincrement())
  /// @zod.custom(imports.parseDate)
  StartDate          DateTime           @db.Date
  /// @zod.custom(imports.parseDate)
  EndDate            DateTime           @db.Date
  /// @zod.custom(imports.isNumber)
  Weight             Float?
  /// @zod.custom(imports.isNumber)
  Hours              Float?
  /// @zod.custom(imports.isNumber)
  TotalRate          Float?
  /// @zod.custom(imports.isNumber)
  TotalAmount        Float?
  /// @zod.custom(imports.isNumber)
  TruckRate          Float?
  /// @zod.custom(imports.isNumber)
  MaterialRate       Float?
  Received           String?            @db.VarChar(50)
  Notes              String?            @db.VarChar(255)
  TicketNumber       Int?
  Invoiced           Boolean?
  /// @zod.min(1)
  CustomerID         Int?
  /// @zod.min(1)
  InvoiceID          Int?
  /// @zod.min(1)
  LoadTypeID         Int?
  DeliveryLocationID Int?
  TruckID            Int?
  DriverID           Int?
  Deleted            Boolean?
  Customers          Customers?         @relation(fields: [CustomerID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_Customer")
  DeliveryLocations  DeliveryLocations? @relation(fields: [DeliveryLocationID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_DeliveryLocation")
  Drivers            Drivers?           @relation(fields: [DriverID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_Driver")
  Invoices           Invoices?          @relation(fields: [InvoiceID], references: [ID], onUpdate: Restrict, map: "FK_Loads_Invoice")
  LoadTypes          LoadTypes?         @relation(fields: [LoadTypeID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_LoadType")
  Trucks             Trucks?            @relation(fields: [TruckID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "FK_Loads_Truck")

  @@index([CustomerID], map: "FK_Loads_Customer")
  @@index([DeliveryLocationID], map: "FK_Loads_DeliveryLocation")
  @@index([DriverID], map: "FK_Loads_Driver")
  @@index([InvoiceID], map: "FK_Loads_Invoice")
  @@index([LoadTypeID], map: "FK_Loads_LoadType")
  @@index([TruckID], map: "FK_Loads_Truck")
}

model CustomerDeliveryLocations {
  ID                 Int               @id @default(autoincrement())
  CustomerID         Int
  DeliveryLocationID Int
  /// @zod.custom(imports.parseDate)
  DateUsed           DateTime          @db.Date
  Customers          Customers         @relation(fields: [CustomerID], references: [ID], onUpdate: Restrict, map: "FK_CustomerDeliveryLocations_Customer")
  DeliveryLocations  DeliveryLocations @relation(fields: [DeliveryLocationID], references: [ID], onUpdate: Restrict, map: "FK_CustomerDeliveryLocations_DeliveryLocation")

  @@index([CustomerID], map: "FK_CustomerDeliveryLocations_Customer")
  @@index([DeliveryLocationID], map: "FK_CustomerDeliveryLocations_DeliveryLocation")
}

model CustomersBackup {
  ID          Int      @id @default(autoincrement())
  Name        String   @db.VarChar(255)
  Street      String   @db.VarChar(255)
  City        String   @db.VarChar(255)
  State       Int      @default(25)
  ZIP         String   @db.VarChar(10)
  Phone       String?  @db.VarChar(20)
  Email       String?  @db.VarChar(255)
  Notes       String?  @db.VarChar(255)
  MainContact String?  @db.VarChar(255)
  Deleted     Boolean?

  @@index([State], map: "FK_Customers_States")
  @@fulltext([Name, Street, City, ZIP, Phone, Email, Notes, MainContact], map: "Customers_Name_Street_City_ZIP_Phone_Email_Notes_MainContact_idx")
}

model DeliveryLocationsBackup {
  ID          Int      @id @default(autoincrement())
  Description String   @db.VarChar(255)
  Deleted     Boolean?
  CustomerID  Int?

  @@index([CustomerID], map: "FK_DeliveryLocations_Customers")
  @@fulltext([Description], map: "DeliveryLocations_Description_idx")
}

model DriversBackup {
  ID         Int       @id @default(autoincrement())
  FirstName  String    @db.VarChar(255)
  MiddleName String?   @db.VarChar(255)
  LastName   String    @db.VarChar(255)
  Street     String?   @db.VarChar(255)
  City       String?   @db.VarChar(255)
  State      Int?
  ZIP        String?   @db.VarChar(10)
  DOB        DateTime? @db.Date
  License    String?   @db.VarChar(255)
  Email      String?   @db.VarChar(255)
  Phone      String?   @db.VarChar(20)
  Notes      String?   @db.VarChar(255)
  Deleted    Boolean?
  HireDate   String?   @db.VarChar(255)

  @@index([State], map: "FK_Drivers_States")
  @@fulltext([FirstName, MiddleName, LastName, Street, City, ZIP, License, Email, Phone, Notes, HireDate], map: "Drivers_FirstName_MiddleName_LastName_Street_City_ZIP_Licens_idx")
}

model InvoicesBackup {
  ID          Int       @id @default(autoincrement())
  InvoiceDate DateTime  @db.Date
  Number      Int?
  CustomerID  Int
  TotalAmount Float
  PaidDate    DateTime? @db.Date
  CheckNumber String?   @db.VarChar(255)
  Paid        Boolean?
  Printed     Boolean?
  Deleted     Boolean?
  PaymentType String?   @default("N/A") @db.VarChar(255)

  @@index([CustomerID], map: "FK_Invoices_Customer")
}

model LoadTypesBackup {
  ID          Int      @id @default(autoincrement())
  Description String   @db.VarChar(255)
  Deleted     Boolean?
  SourceID    Int?
  Notes       String?  @db.VarChar(255)

  @@fulltext([Description, Notes], map: "LoadTypes_Description_Notes_idx")
}

model LoadsBackup {
  ID                 Int      @id @default(autoincrement())
  StartDate          DateTime @db.Date
  EndDate            DateTime @db.Date
  Weight             Float?
  Hours              Float?
  TotalRate          Float?
  TotalAmount        Float?
  TruckRate          Float?
  MaterialRate       Float?
  Received           String?  @db.VarChar(50)
  Notes              String?  @db.VarChar(255)
  TicketNumber       Int?
  Invoiced           Boolean?
  CustomerID         Int?
  InvoiceID          Int?
  LoadTypeID         Int?
  DeliveryLocationID Int?
  TruckID            Int?
  DriverID           Int?
  Deleted            Boolean?

  @@index([CustomerID], map: "FK_Loads_Customer")
  @@index([DeliveryLocationID], map: "FK_Loads_DeliveryLocation")
  @@index([DriverID], map: "FK_Loads_Driver")
  @@index([InvoiceID], map: "FK_Loads_Invoice")
  @@index([LoadTypeID], map: "FK_Loads_LoadType")
  @@index([TruckID], map: "FK_Loads_Truck")
}

model TrucksBackup {
  ID      Int      @id @default(autoincrement())
  Name    String   @db.VarChar(255)
  VIN     String?  @db.VarChar(255)
  Deleted Boolean?
  Notes   String?  @db.VarChar(255)

  @@fulltext([Name, VIN, Notes], map: "Trucks_Name_VIN_Notes_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model migrationCustomers {
  ID          Int
  Name        String?  @db.VarChar(50)
  Address     String?  @db.VarChar(50)
  City        String?  @db.VarChar(50)
  State       String?  @db.VarChar(50)
  ZIP         String?  @db.VarChar(50)
  Email       String?  @db.VarChar(200)
  Phone       String?  @db.VarChar(50)
  Notes       String?  @db.VarChar(255)
  MainContact String?  @db.VarChar(50)
  Deleted     Boolean?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model migrationDelivery {
  ID          Int?
  Description String?  @db.VarChar(200)
  Deleted     Boolean?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model migrationDrivers {
  ID             Int?
  FirstName      String?   @db.VarChar(50)
  MiddleName     String?   @db.VarChar(50)
  LastName       String?   @db.VarChar(50)
  Street         String?   @db.VarChar(200)
  City           String?   @db.VarChar(50)
  State          String?   @db.VarChar(50)
  ZIP            String?   @db.VarChar(50)
  DOB            DateTime? @db.Date
  License        String?   @db.VarChar(100)
  Email          String?   @db.VarChar(200)
  Phone          String?   @db.VarChar(50)
  Notes          String?   @db.VarChar(255)
  Deleted        Boolean?
  SSN            String?   @db.VarChar(50)
  HireDate       String?   @db.VarChar(50)
  PreferredTruck Int?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model migrationInvoices {
  ID            Int
  InvoiceDate   DateTime? @db.Date
  Number        Int?
  CustomerID    Int?
  TotalAmount   Float?
  PaymentTypeID Int?
  PaidDate      String?   @db.VarChar(50)
  CheckNumber   String?   @db.VarChar(50)
  Paid          Boolean?
  Printed       Boolean?
  Deleted       Boolean?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model migrationLoads {
  ID                    Int
  StartDate             DateTime? @db.Date
  EndDate               DateTime? @db.Date
  Weight                Float?
  Hours                 Float?
  TotalRate             Float?
  TotalAmount           Float?
  TruckRate             Float?
  MaterialRate          Float?
  Received              String?   @db.VarChar(50)
  Notes                 String?   @db.VarChar(255)
  TicketNumber          Int?
  CustomerID            Int?
  InvoiceID             Int?
  LoadTypeID            Int?
  DeliveryDescriptionID Int?
  TruckID               Int?
  DriverID              Int?
  Invoiced              Boolean?
  Deleted               Boolean?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model migrationTrucks {
  ID      Int?
  Name    String?  @db.VarChar(50)
  VIN     String?  @db.VarChar(50)
  Deleted Boolean?
  Notes   String?  @db.VarChar(200)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model migrationTypes {
  ID          Int?
  Description String?  @db.VarChar(50)
  Deleted     Boolean?
  SourceID    Int?
  Notes       String?  @db.VarChar(255)

  @@ignore
}
